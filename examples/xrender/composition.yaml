---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: aws-eks-import
  labels:
    provider: aws
    component: aws-eks-importer
    app.kubernetes.io/name: aws-eks-importer
    app.kubernetes.io/managed-by: crossplane
spec:
  compositeTypeRef:
    apiVersion: crossplane.giantswarm.io/v1alpha1
    kind: CompositeEksImport
  mode: Pipeline
  pipeline:
  - step: collect-cluster
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      metadata:
        namespace: crossplane
      patchSets:
        # This is a generic patchset that gets applied to all resources
        #
        # To override specific patches, make sure the overrides are applied
        # after applying the patchset to a resource
        - name: metadata
          patches:
            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: metadata.name
            - fromFieldPath: metadata.namespace
              toFieldPath: metadata.namespace
            - fromFieldPath: spec.labels
              toFieldPath: metadata.labels
              policy:
                mergeOptions:
                  keepMapValues: true
            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: metadata.labels[app.kubernetes.io/name]
            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: metadata.labels[app.kubernetes.io/part-of]
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s-eks-import"

            - fromFieldPath: spec.parameters.deletionPolicy
              toFieldPath: spec.deletionPolicy
            - fromFieldPath: spec.namespace
              toFieldPath: spec.writeConnectionSecretToRef.namespace

        # Specific patches for AWS resources directly implemented by provider-aws-*^
        - name: awsConfig
          patches:
            - fromFieldPath: spec.parameters.region
              toFieldPath: spec.forProvider.region
            - fromFieldPath: spec.parameters.awsProviderConfigRef
              toFieldPath: spec.providerConfigRef.name

        # Patches for any resource implemented via provider-kubernetes
        - name: kubernetesConfig
          patches:
            - fromFieldPath: spec.parameters.kubernetesProviderConfigRef
              toFieldPath: spec.providerConfigRef.name

            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: spec.forProvider.manifest.metadata.name
            - fromFieldPath: spec.namespace
              toFieldPath: spec.forProvider.manifest.metadata.namespace
            - fromFieldPath: spec.kubernetesAdditionalLabels
              toFieldPath: spec.forProvider.manifest.metadata.labels
              policy:
                mergeOptions:
                  keepMapValues: true
            - fromFieldPath: metadata.labels.owner
              toFieldPath: spec.forProvider.manifest.metadata.labels[application.giantswarm.io/team]
            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: spec.forProvider.manifest.metadata.labels[cluster.x-k8s.io/cluster-name]
            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: spec.forProvider.manifest.metadata.labels[giantswarm.io/cluster]


      resources:
        - name: eks-cluster
          base:
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: Cluster
            spec:
              managementPolicies:
                - Observe
          patches:
            # By patching the external-name we instruct crossplane of the
            # ID or name identifier of the remote object
            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: metadata.annotations[crossplane.io/external-name]

            # Apply AWS specific patches
            - type: PatchSet
              patchSetName: awsConfig

            # Apply common metadata
            - type: PatchSet
              patchSetName: metadata

            # The connection config secret must be unique amongst all objects in this set
            - fromFieldPath: spec.parameters.clusterName
              toFieldPath: spec.writeConnectionSecretToRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s-eks-cluster"

            # The following patches are required to take information
            # from this resource and share it amongst other resources
            # so that they can patch accordingly
            #
            # This information is shared by the `status` descriptor
            # in `definition.yaml`
            - type: ToCompositeFieldPath
              toFieldPath: status.endpoint
              fromFieldPath: status.atProvider.endpoint
              transforms:
                - type: string
                  string:
                    type: TrimPrefix
                    trim: 'https://'
            - type: ToCompositeFieldPath
              toFieldPath: status.serviceCidrBlock
              fromFieldPath: status.atProvider.kubernetesNetworkConfig[0].serviceIpv4Cidr
            - type: ToCompositeFieldPath
              toFieldPath: status.vpcId
              fromFieldPath: status.atProvider.vpcConfig[0].vpcId
            - type: ToCompositeFieldPath
              toFieldPath: status.subnetIds
              fromFieldPath: status.atProvider.vpcConfig[0].subnetIds
            - type: ToCompositeFieldPath
              fromFieldPath: status.atProvider.vpcConfig[0].clusterSecurityGroupId
              toFieldPath: status.securityGroups.cluster
            - type: ToCompositeFieldPath
              fromFieldPath: status.atProvider.vpcConfig[0].securityGroupIds[0]
              toFieldPath: status.securityGroups.controlPlane
            - type: ToCompositeFieldPath
              fromFieldPath: status.atProvider.roleArn
              toFieldPath: status.roleName
              transforms:
                - type: string
                  string:
                    type: Regexp
                    regexp:
                      match: '.*\/(.*)'
                      group: 1
            - type: ToCompositeFieldPath
              fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
              toFieldPath: status.oidcIssuer
            - type: ToCompositeFieldPath
              fromFieldPath: status.atProvider.version
              toFieldPath: status.version
  - step: generate-subnets
    functionRef:
      name: function-generate-subnets
    input:
      apiVersion: generator.fn.giantswarm.io
      kind: Subnet
      metadata:
        namespace: crossplane
      spec:
        clusterRef: eks-cluster
        patchTo: status.subnets